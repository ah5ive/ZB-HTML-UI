{"version":3,"sources":["tour.scss","_variables.scss","tour.css","../../node_modules/bootstrap/scss/mixins/_breakpoints.scss","_mixins.scss","_fonts.scss"],"names":[],"mappings":"AAWA;EACE,yICNgD;EDMhD,iICNgD;EDMhD,4HCNgD;EDMhD,yHCNgD;EDMhD,qLCNgD;EDOhD,eAAe;EACf,UAAU;EACV,YAAY;EACZ,YAAY;EACZ,aAAa;EACb,yBC2BmB;ED1BnB,kBAAkB;EAClB,kBAAkB;EAClB,8CCuBmB;EDvBnB,sCCuBmB;EDtBnB,eAAe;EAEf,aAAa;AEXf;;AC+CI;EHjDJ;IAeI,cAAc;EERhB;AACF;;AFRA;EAmBI,yBAA0C;AEP9C;;AFZA;EAuBI,yIC5B8C;ED4B9C,iIC5B8C;ED4B9C,4HC5B8C;ED4B9C,yHC5B8C;ED4B9C,qLC5B8C;ED6B9C,6BAAqB;EAArB,yBAAqB;EAArB,qBAAqB;AEPzB;;AFjBA;EA2BM,cAAc;AENpB;;AFrBA;EA+BM,UAAU;EACV,kBAAkB;AENxB;;AF1BA;EAqCI,iFCf+C;EDe/C,yECf+C;EDe/C,oECf+C;EDe/C,iECf+C;EDe/C,gICf+C;EDgB/C,2BAAmB;EAAnB,uBAAmB;EAAnB,mBAAmB;AEPvB;;AF/BA;EA0CI,iBAAiB;EACjB,aAAa;AEPjB;;AFpCA;EA8CM,WAAW;EACX,YAAY;AENlB;;AFzCA;EAoDI,yHCzD8C;EDyD9C,oHCzD8C;EDyD9C,iHCzD8C;ED0D9C,eAAe;EACf,iBAAiB;EACjB,kBAAkB;AEPtB;;AFhDA;EIkLE,kBAAkB;EAClB,WJxH0B;EIyH1B,YJzH0B;EI0H1B,eAAe;EJzHb,iBAAiB;EACjB,kBAAkB;EAClB,eAAe;EACf,kBAAkB;AEJtB;;AF3DA;EIyLI,sBAA0C;EAC1C,WAAW;EACX,kBAAkB;EAClB,QAA+B;EAC/B,WJlI8B;EImI9B,WJnImC;EIoInC,yBHpKiB;AC0CrB;;AFrEA;EImMI,gCAAwB;EAAxB,4BAAwB;EAAxB,wBAAwB;AF1H5B;;AFzEA;EIuMI,iCAAyB;EAAzB,6BAAyB;EAAzB,yBAAyB;AF1H7B;;AF7EA;EAmEM,6ECxE4C;EDwE5C,wECxE4C;EDwE5C,qECxE4C;ACsFlD;;AFjFA;EAyEQ,yBC5CiB;ACwDzB;;AFrFA;;EKSE,2EAA2E;EAC3E,gBAAgB;ELuEd,cCtDiB;ACiErB;;AF5FA;EIqFI,eAA0B;EAWxB,iBAAkC;EAKpC,gBJhBqB;EACrB,kBAAkB;AEatB;;AFnGA;EA0FI,kEC/F8C;ED+F9C,6DC/F8C;ED+F9C,0DC/F8C;EG0F9C,eAA0B;EAWxB,iBAAkC;EA6GtC,kBAAkB;EAClB,qBAAqB;AFnGvB;;AF3GA;EIiNI,WAAW;EACX,kBAAkB;EAClB,YJvH0B;EIwH1B,OAAO;EACP,WAAW;EACX,aAA0B;EAC1B,8BAA8B;AFlGlC;;AFrHA;EA+FM,cClEmB;AC4FzB","file":"tour.css","sourcesContent":["// =====================================================================\n// Tour\n// =====================================================================\n\n@import 'variables';\n@import 'mixins';\n@import 'fonts';\n@import 'bootstrap/scss/functions';\n@import 'bootstrap/scss/variables';\n@import 'bootstrap/scss/mixins/breakpoints';\n\n.tour {\n  transition: transform 0.4s $easeOutCubic, background-color 0.4s $easeOutCubic;\n  position: fixed;\n  left: 15px;\n  bottom: 15px;\n  width: 100px;\n  height: 100px;\n  background-color: $color-brand;\n  border-radius: 50%;\n  text-align: center;\n  box-shadow: 0 0 5px rgba($color-black, 0.4);\n  cursor: pointer;\n\n  display: none;\n  @include media-breakpoint-up(lg) {\n    display: block;\n  }\n\n  &:hover {\n    background-color: darken($color-brand, 5%);\n  }\n\n  &.is-minimized {\n    transition: transform 0.4s $easeOutCubic, background-color 0.4s $easeOutCubic;\n    transform: scale(0.4);\n\n    .tour-expand {\n      display: block;\n    }\n\n    .tour-content {\n      opacity: 0;\n      visibility: hidden;\n    }\n  }\n\n  &.is-hidden {\n    transition: transform 0.4s $easeInBack;\n    transform: scale(0);\n  }\n\n  .tour-expand {\n    line-height: 90px;\n    display: none;\n\n    .svg-icon-expand {\n      width: 50px;\n      height: auto;\n    }\n  }\n\n  .tour-content {\n    transition: opacity 0.4s $easeOutCubic, visibility 0.4s $easeOutCubic;\n    max-width: 80px;\n    margin-left: auto;\n    margin-right: auto;\n  }\n\n  .cancel {\n    @include btn-cancel(14px, 100%, 2px, $color-white);\n    margin-left: auto;\n    margin-right: auto;\n    margin-top: 8px;\n    margin-bottom: 8px;\n\n    &::before,\n    &::after {\n      transition: background-color 0.3s $easeOutCubic;\n    }\n\n    &:hover {\n      &::before,\n      &::after {\n        background-color: $color-whitepale;\n      }\n    }\n  }\n\n  p,\n  a {\n    @include font-notosanssc-medium;\n    color: $color-white;\n  }\n\n  p {\n    @include font(14, 1.2);\n    margin-bottom: 5px;\n  }\n\n  a {\n    transition: color 0.3s $easeOutCubic;\n    @include font(11);\n    @include underline(1, -2px);\n\n    &:hover {\n      color: $color-whitepale;\n    }\n  }\n}\n","// =====================================================================\n// Variables\n// =====================================================================\n\n// Animation\n$easeInCubic: cubic-bezier(0.55, 0.055, 0.675, 0.19);\n$easeOutCubic: cubic-bezier(0.215, 0.61, 0.355, 1);\n$easeInOutCubic: cubic-bezier(0.645, 0.045, 0.355, 1);\n\n$easeInCirc: cubic-bezier(0.6, 0.04, 0.98, 0.335);\n$easeOutCirc: cubic-bezier(0.075, 0.82, 0.165, 1);\n$easeInOutCirc: cubic-bezier(0.785, 0.135, 0.15, 0.86);\n\n$easeInExpo: cubic-bezier(0.95, 0.05, 0.795, 0.035);\n$easeOutExpo: cubic-bezier(0.19, 1, 0.22, 1);\n$easeInOutExpo: cubic-bezier(1, 0, 0, 1);\n\n$easeInQuad: cubic-bezier(0.55, 0.085, 0.68, 0.53);\n$easeOutQuad: cubic-bezier(0.25, 0.46, 0.45, 0.94);\n$easeInOutQuad: cubic-bezier(0.455, 0.03, 0.515, 0.955);\n\n$easeInQuart: cubic-bezier(0.895, 0.03, 0.685, 0.22);\n$easeOutQuart: cubic-bezier(0.165, 0.84, 0.44, 1);\n$easeInOutQuart: cubic-bezier(0.77, 0, 0.175, 1);\n\n$easeInQuint: cubic-bezier(0.755, 0.05, 0.855, 0.06);\n$easeOutQuint: cubic-bezier(0.23, 1, 0.32, 1);\n$easeInOutQuint: cubic-bezier(0.86, 0, 0.07, 1);\n\n$easeInSine: cubic-bezier(0.47, 0, 0.745, 0.715);\n$easeOutSine: cubic-bezier(0.39, 0.575, 0.565, 1);\n$easeInOutSine: cubic-bezier(0.445, 0.05, 0.55, 0.95);\n\n$easeInBack: cubic-bezier(0.6, -0.28, 0.735, 0.045);\n$easeOutBack: cubic-bezier(0.175, 0.885, 0.32, 1.275);\n$easeInOutBack: cubic-bezier(0.68, -0.55, 0.265, 1.55);\n\n// Colours\n$color-white: #ffffff;\n$color-whitepale-light: #f4f5f7;\n$color-whitepale: #eaeaea;\n$color-grey-lighter: #cccccc;\n$color-grey-light: #9e9e9e;\n$color-grey: #464646;\n$color-black: #000000;\n$color-brand: #a50034;\n$color-brand-light: #cf1818;\n$color-brand-darkmode: #ff1339;\n$color-pink: #ff8bc6;\n$color-pink-light: #ffdbed;\n$color-yellow: #fad307;\n$color-blue-light: #6bd0f3;\n$color-blue: #3951d4;\n$color-u-weekly: #00a5c0;\n$ads-color: #fff8f8;\n\n$color-red-shinmin: #ff1339;\n$color-blue-wanbao: #0098de;\n$color-body: $color-grey;\n\n// Fonts\n$font-root-size: percentage(10 / 16); // 16 is default browser font-size\n$font-base-size: 18;\n\n$font-ls-medium: 4px; // cta\n$font-ls-regular: 2px; // article title\n$font-ls-small: 0.5px; // body\n\n// General\n$br-large: 24px;\n$br-regular: 8px;\n$ham-w: 30px;\n$ham-h: 21px;\n$icon-unlock-maxw: 60px;\n$cta-h: 30px;\n$cta-h-tall: 40px;\n\n// Specifics\n$maxw-xl: 1670px; // 1680px\n$mobile-aside-handle-h: 55px;\n$topnavbar-header-h: 45px;\n$topnavbar-mobile-allowance-mb: 50px;\n",".tour {\n  transition: transform 0.4s cubic-bezier(0.215, 0.61, 0.355, 1), background-color 0.4s cubic-bezier(0.215, 0.61, 0.355, 1);\n  position: fixed;\n  left: 15px;\n  bottom: 15px;\n  width: 100px;\n  height: 100px;\n  background-color: #a50034;\n  border-radius: 50%;\n  text-align: center;\n  box-shadow: 0 0 5px rgba(0, 0, 0, 0.4);\n  cursor: pointer;\n  display: none;\n}\n\n@media (min-width: 992px) {\n  .tour {\n    display: block;\n  }\n}\n\n.tour:hover {\n  background-color: #8c002c;\n}\n\n.tour.is-minimized {\n  transition: transform 0.4s cubic-bezier(0.215, 0.61, 0.355, 1), background-color 0.4s cubic-bezier(0.215, 0.61, 0.355, 1);\n  transform: scale(0.4);\n}\n\n.tour.is-minimized .tour-expand {\n  display: block;\n}\n\n.tour.is-minimized .tour-content {\n  opacity: 0;\n  visibility: hidden;\n}\n\n.tour.is-hidden {\n  transition: transform 0.4s cubic-bezier(0.6, -0.28, 0.735, 0.045);\n  transform: scale(0);\n}\n\n.tour .tour-expand {\n  line-height: 90px;\n  display: none;\n}\n\n.tour .tour-expand .svg-icon-expand {\n  width: 50px;\n  height: auto;\n}\n\n.tour .tour-content {\n  transition: opacity 0.4s cubic-bezier(0.215, 0.61, 0.355, 1), visibility 0.4s cubic-bezier(0.215, 0.61, 0.355, 1);\n  max-width: 80px;\n  margin-left: auto;\n  margin-right: auto;\n}\n\n.tour .cancel {\n  position: relative;\n  width: 14px;\n  height: 14px;\n  cursor: pointer;\n  margin-left: auto;\n  margin-right: auto;\n  margin-top: 8px;\n  margin-bottom: 8px;\n}\n\n.tour .cancel::before, .tour .cancel::after {\n  top: calc(50% - (1px));\n  content: '';\n  position: absolute;\n  left: 0%;\n  width: 100%;\n  height: 2px;\n  background-color: #ffffff;\n}\n\n.tour .cancel::before {\n  transform: rotate(45deg);\n}\n\n.tour .cancel::after {\n  transform: rotate(-45deg);\n}\n\n.tour .cancel::before, .tour .cancel::after {\n  transition: background-color 0.3s cubic-bezier(0.215, 0.61, 0.355, 1);\n}\n\n.tour .cancel:hover::before, .tour .cancel:hover::after {\n  background-color: #eaeaea;\n}\n\n.tour p,\n.tour a {\n  font-family: 'Noto Sans SC', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 500;\n  color: #ffffff;\n}\n\n.tour p {\n  font-size: 14px;\n  font-size: 1.4rem;\n  line-height: 1.2;\n  margin-bottom: 5px;\n}\n\n.tour a {\n  transition: color 0.3s cubic-bezier(0.215, 0.61, 0.355, 1);\n  font-size: 11px;\n  font-size: 1.1rem;\n  position: relative;\n  text-decoration: none;\n}\n\n.tour a::after {\n  content: '';\n  position: absolute;\n  bottom: -2px;\n  left: 0;\n  width: 100%;\n  height: 0.1em;\n  background-color: currentColor;\n}\n\n.tour a:hover {\n  color: #eaeaea;\n}\n","// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl))\n//    md\n@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {\n  $n: index($breakpoint-names, $name);\n  @return if($n != null and $n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    576px\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n  $min: map-get($breakpoints, $name);\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width. Null for the largest (last) breakpoint.\n// The maximum value is calculated as the minimum of the next one less 0.02px\n// to work around the limitations of `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n  $next: breakpoint-next($name, $breakpoints);\n  @return if($next, breakpoint-min($next, $breakpoints) - .02, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, \"\", \"-#{$name}\");\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($lower, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  $max: breakpoint-max($name, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($name, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($name, $breakpoints) {\n      @content;\n    }\n  }\n}\n","// ========================================================================\n// MIXINS\n// ========================================================================\n\n@mixin truncate {\n  display: block;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n@mixin lineclamp($linenumber) {\n  display: -webkit-box;\n  -webkit-line-clamp: $linenumber;\n  -webkit-box-orient: vertical;\n  overflow: hidden;\n}\n\n@mixin clearfix {\n  &::after {\n    content: '';\n    clear: both;\n    display: table;\n  }\n}\n\n@mixin bordered-gradient($from, $to, $bg) {\n  &::before {\n    background: linear-gradient(to right, $from, $to);\n  }\n\n  &::after {\n    background-color: $bg;\n  }\n}\n\n@mixin reset-button {\n  background: none;\n  border: 0;\n  padding: 0;\n  margin: 0;\n  outline: none;\n  cursor: pointer;\n}\n\n@mixin reset-input {\n  margin: 0;\n  border: 0;\n  padding: 0;\n  display: inline-block;\n  vertical-align: middle;\n  white-space: normal;\n  background: none;\n  line-height: 1;\n}\n\n@mixin reset-list {\n  padding-left: 0;\n  margin-bottom: 0;\n  list-style-type: none;\n}\n\n@mixin revert-list {\n  display: block;\n  list-style-type: disc;\n  margin-top: 1em;\n  margin-bottom: 1em;\n  margin-left: 0;\n  margin-right: 0;\n  padding-left: 40px;\n\n  > li {\n    display: list-item;\n  }\n}\n\n// https://maximilianhoffmann.com/posts/better-font-rendering-on-osx\n@mixin font-smoothing($value: on) {\n  @if $value == on {\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n\n  @else {\n    -webkit-font-smoothing: subpixel-antialiased;\n    -moz-osx-font-smoothing: auto;\n  }\n}\n\n// @include font(21, 24, 20)\n@mixin font($sizeValue: 16, $lineHeight: null, $letterSpacing: null, $isEm: false) {\n  @if type-of($sizeValue) == 'string' {\n    font-size: $sizeValue;\n  }\n\n  @else {\n    font-size: $sizeValue + px;\n\n    @if ($isEm) {\n      font-size: em($sizeValue);\n\n      // p {\n      //   font-size: em(10); // unset compounding\n      // }\n    }\n\n    @else {\n      font-size: ($sizeValue / 10) + rem;\n    }\n  }\n\n  @if type-of($lineHeight) != null {\n    line-height: $lineHeight;\n  }\n\n  @if type-of($letterSpacing) != null {\n    letter-spacing: $letterSpacing;\n  }\n}\n\n@mixin hamburger($width, $height, $thickness, $linecolor) {\n  position: relative;\n  width: $width;\n  height: $height;\n\n  > div {\n    position: absolute;\n    left: 0;\n    background-color: $linecolor;\n    width: 100%;\n    height: $thickness;\n\n    &:nth-child(1) {\n      top: 0;\n    }\n\n    &:nth-child(2) {\n      top: 50%;\n      margin-top: -($thickness / 2);\n    }\n\n    &:nth-child(3) {\n      bottom: 0;\n    }\n  }\n}\n\n// @include aspect-ratio(16, 9);\n@mixin aspect-ratio($width, $height) {\n  width: 100%;\n\n  &::before {\n    content: '';\n    width: 1px;\n    margin-left: -1px;\n    float: left;\n    height: 0;\n    padding-top: ($height / $width) * 100%;\n  }\n\n  &::after {\n    content: '';\n    display: table;\n    clear: both;\n  }\n}\n\n// @include loading($w: 10px, $border-w: 2px, $spd: 1.3s, $primary: red, $secondary: green);\n@mixin loading($w: 24px, $border-w: 4px, $spd: 0.9s, $primary: darken(#ffffff, 45%), $secondary: darken(#ffffff, 25%)) {\n  width: $w;\n  height: $w;\n  margin-top: -($w / 2);\n  margin-left: -($w / 2);\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  padding: 0;\n  border-radius: 50%;\n  border-style: solid;\n  border-width: $border-w;\n  border-top-color: $primary;\n  border-left-color: $secondary;\n  border-bottom-color: $secondary;\n  border-right-color: $secondary;\n  animation: spinning $spd linear infinite;\n}\n\n// @include btn-cancel(20px, 100%, 1px, transparentize($color-black, 0.5));\n@mixin btn-cancel($length, $cross-length, $cross-thickness, $cross-color) {\n  position: relative;\n  width: $length;\n  height: $length;\n  cursor: pointer;\n\n  &::before,\n  &::after {\n    top: calc(50% - (#{$cross-thickness / 2}));\n    content: '';\n    position: absolute;\n    left: (100 - $cross-length) / 2;\n    width: $cross-length;\n    height: $cross-thickness;\n    background-color: $cross-color;\n  }\n\n  &::before {\n    transform: rotate(45deg);\n  }\n\n  &::after {\n    transform: rotate(-45deg);\n  }\n}\n\n// @include underline(0.5, -2px);\n@mixin underline($thickness, $offset) {\n  position: relative;\n  text-decoration: none;\n\n  &::after {\n    content: '';\n    position: absolute;\n    bottom: $offset;\n    left: 0;\n    width: 100%;\n    height: 0.1em * $thickness;\n    background-color: currentColor;\n  }\n}\n\n// @include underline-border(0.5, -2px);\n@mixin underline-border($thickness, $offset) {\n  position: relative;\n  text-decoration: none;\n  padding-bottom: ($offset + em);\n  border-bottom: ($thickness + px) solid currentColor;\n\n  &:hover,\n  &:focus,\n  &:visited {\n    text-decoration: none;\n  }\n}\n","// =====================================================================\n// Fonts\n// =====================================================================\n\n// @font-face {\n// \tfont-family: 'HoratioLT-Light';\n// \tsrc: url('./fonts/HoratioLT-Light.eot?') format('eot'),\n// \t     url('./fonts/HoratioLT-Light.woff') format('woff'),\n// \t     url('./fonts/HoratioLT-Light.ttf')  format('truetype'),\n// \t     url('./fonts/HoratioLT-Light.svg#HoratioLT-Light') format('svg')\n// }\n\n// @import url('https://fonts.googleapis.com/css?family=Noto+Sans+SC:400,500,700');\n\n@mixin font-notosanssc-regular {\n  font-family: 'Noto Sans SC', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 400;\n}\n\n@mixin font-notosanssc-medium {\n  font-family: 'Noto Sans SC', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 500;\n}\n\n@mixin font-notosanssc-bold {\n  font-family: 'Noto Sans SC', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n}\n"]}